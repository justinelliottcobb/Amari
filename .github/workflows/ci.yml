name: CI

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

env:
  RUST_BACKTRACE: 1

jobs:
  test-native:
    name: Test Suite (Native Precision)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, nightly]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgmp-dev libmpfr-dev

      - name: Run tests with native precision
        run: cargo test --workspace --features native-precision

      - name: Run clippy
        run: cargo clippy --workspace --features native-precision -- -D warnings
        if: matrix.rust == 'stable'

      - name: Check formatting
        run: cargo fmt --all -- --check
        if: matrix.rust == 'stable'

  test-wasm-compat:
    name: Test Suite (WASM-Compatible Precision)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-wasm-compat-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests with WASM-compatible precision
        run: cargo test --workspace --features high-precision

      - name: Test individual crates
        run: |
          cargo test -p amari-core --features high-precision
          cargo test -p amari-tropical --features high-precision
          cargo test -p amari-dual --features high-precision
          cargo test -p amari-network --features high-precision
          cargo test -p amari-relativistic --features high-precision

  wasm:
    name: WASM Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-wasm32-${{ hashFiles('**/Cargo.lock') }}

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Check WASM compilation (individual crates)
        run: |
          cargo check -p amari-core --target wasm32-unknown-unknown --features high-precision
          cargo check -p amari-tropical --target wasm32-unknown-unknown --features high-precision
          cargo check -p amari-dual --target wasm32-unknown-unknown --features high-precision
          cargo check -p amari-network --target wasm32-unknown-unknown --features high-precision
          cargo check -p amari-relativistic --target wasm32-unknown-unknown --features high-precision

      - name: Build WASM package
        run: |
          cd amari-wasm
          # Build with WASM-compatible high-precision (now uses pure Rust dashu-float)
          wasm-pack build --target web --out-dir pkg --scope amari

      - name: Test WASM package
        run: |
          cd amari-wasm
          wasm-pack test --node

      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-package
          path: amari-wasm/pkg/

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Run benchmarks
        run: cargo bench --workspace 2>&1 | tee output.txt || echo "Benchmarks completed"
        continue-on-error: true

      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'cargo'
          output-file-path: output.txt
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
        continue-on-error: true
        if: always()