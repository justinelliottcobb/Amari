name: Publish to npm and crates.io

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 0.1.0)'
        required: true
        type: string
      publish_npm:
        description: 'Publish to npm'
        required: true
        type: boolean
        default: true
      publish_crates:
        description: 'Publish to crates.io'
        required: true
        type: boolean
        default: true

env:
  CARGO_TERM_COLOR: always

jobs:
  validate:
    name: Validate and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --all-features --workspace

      - name: Run integration tests
        run: ./run_all_tests.sh

  publish-crates:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ github.event.inputs.publish_crates == 'true' || startsWith(github.ref, 'refs/tags/v') }}
    strategy:
      matrix:
        crate:
          - amari-core
          - amari-tropical
          - amari-dual
          - amari-info-geom
          - amari-fusion
          - amari-automata
          - amari-gpu
          - amari  # Main crate last
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Update crate metadata for publishing
        run: |
          # Add required metadata for crates.io
          if [ "${{ matrix.crate }}" != "amari" ]; then
            cd ${{ matrix.crate }}
          fi

          # Check if description exists, add if missing
          if ! grep -q "description" Cargo.toml; then
            case "${{ matrix.crate }}" in
              "amari-core")
                echo 'description = "Core geometric algebra and mathematical structures"' >> Cargo.toml
                ;;
              "amari-tropical")
                echo 'description = "Tropical (max-plus) algebra implementation"' >> Cargo.toml
                ;;
              "amari-dual")
                echo 'description = "Dual number automatic differentiation"' >> Cargo.toml
                ;;
              "amari-info-geom")
                echo 'description = "Information geometry and statistical manifolds"' >> Cargo.toml
                ;;
              "amari-fusion")
                echo 'description = "Fusion system for combining algebraic structures"' >> Cargo.toml
                ;;
              "amari-automata")
                echo 'description = "Cellular automata with geometric constraints"' >> Cargo.toml
                ;;
              "amari-gpu")
                echo 'description = "GPU acceleration for mathematical computations"' >> Cargo.toml
                ;;
              "amari")
                echo 'description = "Advanced mathematical computing library with geometric algebra, tropical algebra, and automatic differentiation"' >> Cargo.toml
                ;;
            esac
          fi

          # Add repository and homepage if missing
          if ! grep -q "repository" Cargo.toml; then
            echo 'repository = "https://github.com/justinelliottcobb/Amari"' >> Cargo.toml
          fi
          if ! grep -q "homepage" Cargo.toml; then
            echo 'homepage = "https://github.com/justinelliottcobb/Amari"' >> Cargo.toml
          fi

          # Add keywords if missing
          if ! grep -q "keywords" Cargo.toml; then
            case "${{ matrix.crate }}" in
              "amari-core")
                echo 'keywords = ["geometric-algebra", "clifford-algebra", "mathematics", "linear-algebra", "multivector"]' >> Cargo.toml
                ;;
              "amari-tropical")
                echo 'keywords = ["tropical-algebra", "max-plus", "semiring", "mathematics", "optimization"]' >> Cargo.toml
                ;;
              "amari-dual")
                echo 'keywords = ["automatic-differentiation", "dual-numbers", "calculus", "mathematics", "derivatives"]' >> Cargo.toml
                ;;
              "amari-info-geom")
                echo 'keywords = ["information-geometry", "statistics", "manifolds", "fisher-metric", "mathematics"]' >> Cargo.toml
                ;;
              "amari-fusion")
                echo 'keywords = ["fusion-system", "algebraic-structures", "mathematics", "composition", "category-theory"]' >> Cargo.toml
                ;;
              "amari-automata")
                echo 'keywords = ["cellular-automata", "geometric-constraints", "computation", "complexity", "mathematics"]' >> Cargo.toml
                ;;
              "amari-gpu")
                echo 'keywords = ["gpu-computing", "webgpu", "parallel", "performance", "mathematics"]' >> Cargo.toml
                ;;
              "amari")
                echo 'keywords = ["mathematics", "geometric-algebra", "tropical-algebra", "automatic-differentiation", "wasm"]' >> Cargo.toml
                ;;
            esac
          fi

          # Add categories if missing
          if ! grep -q "categories" Cargo.toml; then
            echo 'categories = ["mathematics", "science", "algorithms"]' >> Cargo.toml
          fi

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          if [ "${{ matrix.crate }}" != "amari" ]; then
            cd ${{ matrix.crate }}
          fi
          cargo publish --allow-dirty

  build-wasm:
    name: Build WASM Package
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ github.event.inputs.publish_npm == 'true' || startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-wasm-${{ hashFiles('**/Cargo.lock') }}

      - name: Build WASM package
        run: |
          cd amari-wasm
          wasm-pack build --target web --out-dir pkg --scope justinelliottcobb
          wasm-pack build --target nodejs --out-dir pkg-node --scope justinelliottcobb
          wasm-pack build --target bundler --out-dir pkg-bundler --scope justinelliottcobb

      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-packages
          path: |
            amari-wasm/pkg/
            amari-wasm/pkg-node/
            amari-wasm/pkg-bundler/

  publish-npm:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: build-wasm
    if: ${{ github.event.inputs.publish_npm == 'true' || startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Download WASM artifacts
        uses: actions/download-artifact@v4
        with:
          name: wasm-packages
          path: amari-wasm/

      - name: Update package version
        run: |
          cd amari-wasm
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            npm version ${{ github.event.inputs.version }} --no-git-tag-version
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            npm version $VERSION --no-git-tag-version
          fi

      - name: Check if version exists on npm
        id: npm-version-check
        run: |
          cd amari-wasm
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          if npm view $PACKAGE_NAME@$PACKAGE_VERSION version 2>/dev/null; then
            echo "version-exists=true" >> $GITHUB_OUTPUT
            echo "Version $PACKAGE_VERSION already exists on npm"
          else
            echo "version-exists=false" >> $GITHUB_OUTPUT
            echo "Version $PACKAGE_VERSION does not exist, proceeding with publish"
          fi

      - name: Publish to npm
        if: steps.npm-version-check.outputs.version-exists == 'false'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd amari-wasm
          npm publish --ignore-scripts --access public

      - name: Skip npm publish (version exists)
        if: steps.npm-version-check.outputs.version-exists == 'true'
        run: echo "Skipping npm publish - version already exists"

  update-examples:
    name: Update Examples Suite
    runs-on: ubuntu-latest
    needs: [publish-npm]
    if: ${{ success() && (github.event.inputs.publish_npm == 'true' || startsWith(github.ref, 'refs/tags/v')) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Update examples suite to use published package
        run: |
          cd examples-suite

          # Get the published version
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="latest"
          fi

          # Update package.json to use published package
          npm install @justinelliottcobb/amari-core@$VERSION

          # Update examples to import from npm package instead of simulated operations
          # This will be done in a follow-up commit

      - name: Create PR for examples update
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Create a new branch for the update
          git checkout -b update-examples-with-published-library

          cd examples-suite
          git add package.json package-lock.json
          git commit -m "Update examples suite to use published @amari/core package"

          git push origin update-examples-with-published-library

          # Create PR
          gh pr create \
            --title "Update examples suite to use published @justinelliottcobb/amari-core" \
            --body "This PR updates the examples suite to use the published @justinelliottcobb/amari-core npm package instead of simulated operations, providing authentic mathematical functionality." \
            --base feature/api-examples-suite \
            --head update-examples-with-published-library